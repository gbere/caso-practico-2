---
# playbook para la linux vm

- name: 'VM - Aplicación Web'
  hosts: vm1
  remote_user: azureuser
  become: true
  vars_files:
     - vars/azure_container_registry_vars.yaml
     - vars/vm1_vars.yaml
  tasks:

    - name: 'Actualizar la zona horaria'
      timezone:
        name: "{{ timezone }}"

    - name: 'Actualizar todos los paquetes instalados'
      yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: 'Instalar los paquetes que necesitamos'
      yum:
        name: "{{ packages_to_install }}" 
        state: latest

    - name: Identificarnos en nuestro Azure container registry y creamos ${XDG_RUNTIME_DIR}/containers/auth.json
      containers.podman.podman_login:
        registry: "{{ cr_registry }}"
        username: "{{ cr_username }}"
        password: "{{ cr_password }}"

    - name: Pull la imagen symfony-demo:casopractico2
      containers.podman.podman_image:
        name: "{{ cr_registry }}/{{ img_name_sf_demo }}"
        tag: "{{ img_tag_name_sf_demo }}"

    - name: Iniciar contenedor con la imagen symfony-demo:casopractico2
      containers.podman.podman_container:
        name: "{{ img_name_sf_demo }}"
        image: "{{ img_name_sf_demo }}:{{ img_tag_name_sf_demo }}"
        detach: true
        expose:
          - 443
        publish:
          - 443:443
        generate_systemd:
          path: /tmp/
          restart_policy: always
          time: 120
          names: true

    # TODO: Enable firewall?
    # CHECK: reniciar server para comprobar que funciona
    # CHECK: la opción de detener o iniciar el servicio por un administrador -> restart_policy: on-failure ?

    - name: Prueba - copiar template
      template:
        src: files/index.php.j2
        dest: "~/index.php"
        # owner: bin
        # group: wheel
        # mode: '0644'
